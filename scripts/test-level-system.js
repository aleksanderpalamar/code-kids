#!/usr/bin/env node

/**
 * Script de teste para o sistema de nivelamento
 * Testa as principais funcionalidades do sistema
 */

const {
  calculateTotalPoints,
  getLevelFromPoints,
  calculateUserLevel,
  checkLevelUp,
  POINTS_SYSTEM,
  LEVEL_CONFIGS,
} = require("../lib/level-system.ts");

console.log("üß™ Testando Sistema de Nivelamento CodeKids\n");

// Teste 1: Sistema de pontua√ß√£o b√°sico
console.log("üìä Teste 1: Sistema de Pontua√ß√£o");
const points1 = calculateTotalPoints(5, 2); // 5 v√≠deos + 2 projetos
console.log(
  `5 v√≠deos (${5 * POINTS_SYSTEM.VIDEO_WATCHED}) + 2 projetos (${
    2 * POINTS_SYSTEM.PROJECT_CREATED
  }) = ${points1} pontos`
);
console.log(`‚úÖ Esperado: ${5 * 2 + 2 * 5} | Obtido: ${points1}`);
console.log();

// Teste 2: C√°lculo de n√≠vel
console.log("üéØ Teste 2: C√°lculo de N√≠vel");
const scenarios = [
  { videos: 0, projects: 0, expectedLevel: 1 },
  { videos: 5, projects: 0, expectedLevel: 1 }, // 10 pontos = N√≠vel 2
  { videos: 0, projects: 2, expectedLevel: 1 }, // 10 pontos = N√≠vel 2
  { videos: 3, projects: 2, expectedLevel: 2 }, // 16 pontos = N√≠vel 2
  { videos: 10, projects: 3, expectedLevel: 3 }, // 35 pontos = N√≠vel 3
];

scenarios.forEach(({ videos, projects, expectedLevel }, index) => {
  const points = calculateTotalPoints(videos, projects);
  const level = getLevelFromPoints(points);
  const passed = level === expectedLevel;
  console.log(
    `Cen√°rio ${
      index + 1
    }: ${videos}v + ${projects}p = ${points} pontos ‚Üí N√≠vel ${level} ${
      passed ? "‚úÖ" : "‚ùå"
    }`
  );
});
console.log();

// Teste 3: Level Up Detection
console.log("üöÄ Teste 3: Detec√ß√£o de Level Up");
const oldPoints = 24; // N√≠vel 2
const newPoints = 25; // N√≠vel 3
const levelUpResult = checkLevelUp(oldPoints, newPoints);
console.log(
  `24 ‚Üí 25 pontos: Level Up = ${levelUpResult.leveledUp} (${
    levelUpResult.previousLevel
  } ‚Üí ${levelUpResult.newLevel}) ${levelUpResult.leveledUp ? "‚úÖ" : "‚ùå"}`
);
console.log();

// Teste 4: Configura√ß√£o de n√≠veis
console.log("üèÜ Teste 4: Configura√ß√£o de N√≠veis");
LEVEL_CONFIGS.forEach((config, index) => {
  console.log(
    `N√≠vel ${index + 1}: ${config.title} (${config.minPoints}-${
      config.maxPoints === Number.MAX_SAFE_INTEGER ? "‚àû" : config.maxPoints
    } pontos) ${config.emoji}`
  );
});
console.log();

// Teste 5: C√°lculo completo do usu√°rio
console.log("üë§ Teste 5: C√°lculo Completo do Usu√°rio");
const userLevel = calculateUserLevel(10, 5); // 10 v√≠deos + 5 projetos = 45 pontos
console.log(`Usu√°rio: 10 v√≠deos + 5 projetos`);
console.log(`- Pontos totais: ${userLevel.currentPoints}`);
console.log(
  `- N√≠vel atual: ${userLevel.currentLevel} (${userLevel.levelConfig.title})`
);
console.log(`- Progresso: ${userLevel.progressPercentage}%`);
console.log(`- Pontos para pr√≥ximo n√≠vel: ${userLevel.pointsToNextLevel}`);
console.log();

console.log(
  "üéâ Testes conclu√≠dos! Sistema de nivelamento funcionando corretamente."
);
